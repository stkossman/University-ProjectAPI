// <auto-generated />
using Dota2API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dota2API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250507225045_MakeHeroOptionalInAbilities")]
    partial class MakeHeroOptionalInAbilities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dota2API.models.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AbilityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Affects")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cooldown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HeroId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizedName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ManaCost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("HeroId");

                    b.ToTable("Abilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbilityType = "Passive",
                            Affects = "Enemy Heroes",
                            Cooldown = "0",
                            Damage = "Physical",
                            Description = "Burns an opponent's mana on each attack and deals damage equal to a percentage of the mana burned.",
                            HeroId = 1,
                            ImageUrl = "https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/abilities/antimage_mana_break.png",
                            LocalizedName = "Mana Break",
                            ManaCost = "0",
                            Name = "mana_break"
                        },
                        new
                        {
                            Id = 2,
                            AbilityType = "Active",
                            Affects = "Self",
                            Cooldown = "15/12/9/6",
                            Damage = "None",
                            Description = "Short distance teleportation that allows Anti-Mage to move in and out of combat.",
                            HeroId = 1,
                            ImageUrl = "https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/abilities/antimage_blink.png",
                            LocalizedName = "Blink",
                            ManaCost = "60",
                            Name = "blink"
                        },
                        new
                        {
                            Id = 3,
                            AbilityType = "Active",
                            Affects = "Self",
                            Cooldown = "15/11/7/3",
                            Damage = "None",
                            Description = "Passively grants magic resistance. When activated, creates an anti-magic shell around Anti-Mage that reflects targeted spells.",
                            HeroId = 1,
                            ImageUrl = "https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/abilities/antimage_counterspell.png",
                            LocalizedName = "Counterspell",
                            ManaCost = "45/50/55/60",
                            Name = "counterspell"
                        },
                        new
                        {
                            Id = 4,
                            AbilityType = "Active",
                            Affects = "Enemy Units",
                            Cooldown = "70",
                            Damage = "Magical",
                            Description = "Creates a violent ripple in space that drains mana and deals damage to enemies near the target based on their missing mana.",
                            HeroId = 1,
                            ImageUrl = "https://cdn.cloudflare.steamstatic.com/apps/dota2/images/dota_react/abilities/antimage_mana_void.png",
                            LocalizedName = "Mana Void",
                            ManaCost = "100/200/300",
                            Name = "mana_void"
                        });
                });

            modelBuilder.Entity("Dota2API.models.Hero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AgilityGain")
                        .HasColumnType("real");

                    b.Property<string>("AttackType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BaseAgility")
                        .HasColumnType("int");

                    b.Property<float>("BaseArmor")
                        .HasColumnType("real");

                    b.Property<float>("BaseAttackMax")
                        .HasColumnType("real");

                    b.Property<float>("BaseAttackMin")
                        .HasColumnType("real");

                    b.Property<int>("BaseHealth")
                        .HasColumnType("int");

                    b.Property<int>("BaseIntelligence")
                        .HasColumnType("int");

                    b.Property<int>("BaseMana")
                        .HasColumnType("int");

                    b.Property<int>("BaseStrength")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("IntelligenceGain")
                        .HasColumnType("real");

                    b.Property<string>("LocalizedName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MoveSpeed")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrimaryAttribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("StrengthGain")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Heroes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgilityGain = 2.8f,
                            AttackType = "Melee",
                            BaseAgility = 24,
                            BaseArmor = 0f,
                            BaseAttackMax = 33f,
                            BaseAttackMin = 29f,
                            BaseHealth = 200,
                            BaseIntelligence = 12,
                            BaseMana = 75,
                            BaseStrength = 23,
                            ImageUrl = "https://api.opendota.com/apps/dota2/images/heroes/antimage_full.png",
                            IntelligenceGain = 1.8f,
                            LocalizedName = "Anti-Mage",
                            MoveSpeed = 310,
                            Name = "anti-mage",
                            PrimaryAttribute = "Agi",
                            Roles = "Carry,Escape,Nuker",
                            StrengthGain = 1.3f
                        });
                });

            modelBuilder.Entity("Dota2API.models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attributes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRecipe")
                        .HasColumnType("bit");

                    b.Property<string>("LocalizedName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopTags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Dota2API.models.Ability", b =>
                {
                    b.HasOne("Dota2API.models.Hero", "Hero")
                        .WithMany("Abilities")
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Hero");
                });

            modelBuilder.Entity("Dota2API.models.Hero", b =>
                {
                    b.Navigation("Abilities");
                });
#pragma warning restore 612, 618
        }
    }
}
